name: run-infracost
description: Runs infracost to get a cost estimate.

inputs:
  plan-file:
    description: Path to saved terraform plan file
    required: true
  working-directory:
    description: Working directory, in which the infracost command is run
    required: true
  infracost-api-endpoint:
    description: Self-hosted api-endpoint
    required: false
    default: https://infracost.pafcloud.net

outputs:
  output:
    description: infracost output (diff)
    value: ${{ steps.this.outputs.output }}
  summary:
    description: Short summary containing old monthly + new monthly
    value: ${{ steps.this.outputs.summary }}

runs:
  using: composite
  steps:

    - id: resolve-usage-file
      name: Resolve infracost default usage file
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        if [ -z "$GITHUB_WORKSPACE" ]; then
            echo "ERROR: environment variable GITHUB_WORKSPACE is unset"
            exit 1
        fi
        search_stop_dir="$(dirname $GITHUB_WORKSPACE)"
        upcat() {
            declare –a file_path_array=()
            file="$1"
            while [ "$PWD" != "$search_stop_dir" -a "$PWD" != "/" ]; do
                if [ -r "$file" ]; then
                    file_path_array+=("$PWD"/resource-use.yml)
                fi
                cd ..
            done
            echo "${file_path_array[*]}"
        }

        resource_use="$(upcat resource-use.yml)"
        if [ -z "$resource_use" ]; then
            echo "ERROR: Cannot resolve resource-use.yml: no resource-use.yml file found"
            exit 2
        fi
        echo "resource-use=${resource_use[@]}" >> $GITHUB_OUTPUT

    - id: merge-dictionary-files
      working-directory: ${{ inputs.working-directory }}
      shell: python
      env:
        RESOURCE: ${{ steps.resolve-usage-file.outputs.resource-use }}
      run: |
        import yaml
        import os
        import tempfile
        from collections.abc import Mapping
        from functools import partial,reduce
        from typing import MutableMapping

        def merge(destination: MutableMapping, *sources: Mapping) -> MutableMapping:
          def merge_dicts(d1, d2):
            for key, value in d1.items():
              if key in d2:
                if isinstance(d2[key], dict) and isinstance(value, dict):
                  d2[key] = merge_dicts(d2[key], value)
                else:
                  d2[key] = value
            return d2

          return reduce(partial(merge_dicts), sources, destination)

        resources = []
        for filename in os.getenv('RESOURCE', '').split(' '):
          with open(filename, 'r') as file:
            temp = yaml.safe_load(file)
            resources.append(temp)
        runner_temp = os.getenv('RUNNER_TEMP')
        merged = merge(*resources)

        with tempfile.NamedTemporaryFile(dir=runner_temp, suffix="infracost-usage.yml") as yaml_file:
          yaml.dump(merged, yaml_file, default_flow_style=False)

        with open(os.getenv('GITHUB_OUTPUT')) as outputs:
          outputs.write("usage-file={}".format(yaml_file.name))

    - id: this
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      env:
        INFRACOST_CURRENCY: EUR
        INFRACOST_CURRENCY_FORMAT: "EUR: 1.234,56€"
        INFRACOST_PRICING_API_ENDPOINT: ${{ inputs.infracost-api-endpoint }}
        PLAN_FILE: ${{ inputs.plan-file }}
        USAGE_FILE: ${{ steps.merge-dictionary-files.outputs.usage-file }}
      run: |
        tmp_dir=$(mktemp -d $RUNNER_TEMP/infracost.XXXXXXXXXX)
        terragrunt show -json $PLAN_FILE > $tmp_dir/plan.json
        infracost diff --path $tmp_dir/plan.json --format=json --usage-file $USAGE_FILE >> $tmp_dir/infracost.json

        # generate normal output from json
        echo "output<<EOF" >> $GITHUB_OUTPUT
        infracost output --format table --path $tmp_dir/infracost.json >> $GITHUB_OUTPUT
        echo EOF >> $GITHUB_OUTPUT

        # generate summary from json
        currentMonthly=$(jq -r '.projects | .[] | " \(.breakdown.totalMonthlyCost) "' < $tmp_dir/infracost.json)
        pastMonthly=$(jq -r '.projects | .[] | " \(.pastBreakdown.totalMonthlyCost)"' < $tmp_dir/infracost.json)
        echo "summary=$(echo $pastMonthly | awk '{printf("%.2f \n",$1)}')→ $(echo $currentMonthly | awk '{printf("%.2f \n",$1)}')" >> $GITHUB_OUTPUT
