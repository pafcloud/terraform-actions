name: run-infracost
description: Runs infracost to get a cost estimate.

inputs:
  plan-file:
    description: Path to saved terraform plan file
    required: true
  working-directory:
    description: Working directory, in which the infracost command is run
    required: true
  infracost-api-endpoint:
    description: Self-hosted api-endpoint
    required: false
    default: https://infracost.pafcloud.net

outputs:
  output:
    description: infracost output (diff)
    value: ${{ steps.this.outputs.output }}
  summary:
    description: Short summary containing old monthly + new monthly
    value: ${{ steps.this.outputs.summary }}

runs:
  using: composite
  steps:
    - id: this
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      env:
        INFRACOST_CURRENCY: EUR
        INFRACOST_CURRENCY_FORMAT: "EUR: 1.234,56€"
        INFRACOST_PRICING_API_ENDPOINT: ${{ inputs.infracost-api-endpoint }}
        PLAN_FILE: ${{ inputs.plan-file }}
      run: |
        if [ -z "$GITHUB_WORKSPACE" ]; then
          echo "ERROR: environment variable GITHUB_WORKSPACE is unset"
          exit 1
        fi

        search_stop_dir="$(dirname $GITHUB_WORKSPACE)"
        upfind() {
          file="$1"
          while [ "$PWD" != "$search_stop_dir" -a "$PWD" != "/" ]; do
            if [ -r "$file" ]; then
              echo "$file"
              break
            fi
            cd ..
          done
        }

        usage_file="$(upfind resource-use.yml)"
        test -z $usage_file && usage_file_opts="" || usage_file_opts="--usage-file $usage_file"

        tmp_dir=$(mktemp -d $RUNNER_TEMP/infracost.XXXXXXXXXX)
        terragrunt show -json $PLAN_FILE > $tmp_dir/plan.json
        infracost diff --path $tmp_dir/plan.json --format=json $usage_file_opts >> $tmp_dir/infracost.json

        # generate normal output from json
        echo "output<<EOF" >> $GITHUB_OUTPUT
        infracost output --format table --path $tmp_dir/infracost.json >> $GITHUB_OUTPUT
        echo EOF >> $GITHUB_OUTPUT

        # generate summary from json
        currentMonthly=$(jq -r '.projects | .[] | " \(.breakdown.totalMonthlyCost) "' < $tmp_dir/infracost.json)
        pastMonthly=$(jq -r '.projects | .[] | " \(.pastBreakdown.totalMonthlyCost)"' < $tmp_dir/infracost.json)
        echo "summary=$(echo $pastMonthly | awk '{printf("%.2f \n",$1)}')→ $(echo $currentMonthly | awk '{printf("%.2f \n",$1)}')" >> $GITHUB_OUTPUT
