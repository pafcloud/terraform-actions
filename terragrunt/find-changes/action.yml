name: find-changes
description: Finds directory paths with changes to 'terragrunt.hcl' files. Excludes paths that have a 'no-terragrunt-apply' file present.

inputs:
  github-token:
    description: GitHub auth token
    required: true
  pull-request-number:
    description: Pull request number
    required: true

outputs:
  updates:
    description: JSON array of directory paths with added or modified terragrunt.hcl files
    value: ${{ steps.changes.outputs.updates }}
  deletions:
    description: JSON array of directory paths with deleted terragrunt.hcl files
    value: ${{ steps.changes.outputs.deletions }}

runs:
  using: composite
  steps: 
    - id: changes
      run: |
      
        MAX_FILES_PER_PAGE=100
        
        AUTH_HEADER="Authorization: Bearer ${{ inputs.github-token }}"
        URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/pulls/${{ inputs.pull-request-number }}/files?per_page=$MAX_FILES_PER_PAGE"

        print_path() {
          dir=$(echo "$@" | grep terragrunt.hcl$ | sed 's/terragrunt.hcl//')
          if [ ! -z "$dir" -a ! -f "${dir}/no-terragrunt-apply" ]; then
            echo "${dir}"
          fi
        }

        print_changed_files_paged() {
          # Since GitHub workflows can only run max 256 parallel jobs, we max out at 800 changed files, which can
          # accommodate 256 modified terragrunt.hcl files + .terraform-version and .terragrunt-version for each HCL
          for page_num in {1..8}; do
            page="$(curl -sH "${AUTH_HEADER}" "${URL}&page=${page_num}" | jq -c .)"
            num_files=$(echo "$page" | jq length)
            echo "$page"
            if (( "$num_files" < "$MAX_FILES_PER_PAGE" )); then
              # No need to query for more
              break
            fi
          done
        }

        changed_files="$(print_changed_files_paged | jq '.[]' | jq -sc .)"

        updates=$(for f in $(echo "${changed_files}" | jq -r '.[] | select(.status != "removed") | .filename'); do
          print_path "$f"
        done)

        deletions=$(for f in $(echo "${changed_files}" | jq -r '.[] | select(.status == "removed") | .filename'); do
          print_path "$f"
        done)

        # Outputs as JSON arrays
        echo ::set-output name=updates::$(echo -n ${updates} | jq -Rsc 'split(" ")')
        echo ::set-output name=deletions::$(echo -n ${deletions} | jq -Rsc 'split(" ")')
      shell: bash
