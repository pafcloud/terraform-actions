name: setup-tools
description: >
  Sets up desired versions of opentofu and terragrunt by first searching
  .terraform-version and .terragrunt-version files in the current working
  directory and its parents, falling back to optional default versions, and
  failing early if no version can be resolved for either tool

inputs:
  working-directory:
    description: Directory that is scanned for tool version files. Scan includes parent directories up to GITHUB_WORKSPACE
    required: true
  default-opentofu-version:
    description: Default opentofu version. If unspecified, a .terraform-version file must be found, or this action will fail
    required: false
  default-terragrunt-version:
    description: Default terragrunt version. If unspecified, a .terragrunt-version file must be found, or this action will fail
    required: false
  install-opentofu-wrapper:
    description: Install opentofu wrapper script that automatically exposes stdout, stderr and exit code as outputs?
    required: false
    default: 'true'

runs:
  using: composite
  steps: 
    - id: resolve-versions
      name: Resolve opentofu and terragrunt versions
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        if [ -z "$GITHUB_WORKSPACE" ]; then
            echo "ERROR: environment variable GITHUB_WORKSPACE is unset"
            exit 1
        fi
        
        search_stop_dir="$(dirname $GITHUB_WORKSPACE)"
        
        upcat() {
            file="$1"
            while [ "$PWD" != "$search_stop_dir" -a "$PWD" != "/" ]; do
                if [ -r "$file" ]; then
                    cat "$file"
                    break
                fi
                cd ..
            done
        }

        tf_version_from_file="$(upcat .terraform-version)"
        tg_version_from_file="$(upcat .terragrunt-version)"
        
        tf_version="${tf_version_from_file:-$DEFAULT_TF_VERSION}"
        tg_version="${tg_version_from_file:-$DEFAULT_TG_VERSION}"

        if [ -z "$tf_version" ]; then
            echo "ERROR: Cannot resolve opentofu version: no .terraform-version file found, and no default version is specified"
            exit 2
        fi
        
        if [ -z "$tg_version" ]; then
            echo "ERROR: Cannot resolve terragrunt version: no .terragrunt-version file found, and no default version is specified"
            exit 3
        fi

        echo "tf-version=$tf_version" >> $GITHUB_OUTPUT
        echo "tg-version=$tg_version" >> $GITHUB_OUTPUT
      env:
        DEFAULT_TF_VERSION: ${{ inputs.default-terraform-version }}
        DEFAULT_TG_VERSION: ${{ inputs.default-terragrunt-version }}
  
    - name: Setup opentofu
      uses: opentofu/setup-opentofu@v1
      with:
        tofu_version: ${{ steps.resolve-versions.outputs.tf-version }}
        tofu_wrapper: ${{ inputs.install-opentofu-wrapper }}

    - name: Resolve architecture
      id: resolve-architecture
      shell: bash
      run: |
        case "$(uname -m)" in
          x86_64)
            echo "cpu-architecture=amd64" >> $GITHUB_OUTPUT
            ;;
          arm64|aarch64)
            echo "cpu-architecture=arm64" >> $GITHUB_OUTPUT
            ;;
          *)
            echo "ERROR: Unsupported CPU architecture: $(uname -m)"
            exit 4
            ;;
        esac
    
    - name: Setup terragrunt
      shell: bash
      run: |
        download_base_url="https://github.com/gruntwork-io/terragrunt/releases/download/v$TERRAGRUNT_VERSION"
        bin_download_url="${download_base_url}/terragrunt_linux_${CPU_ARCHITECTURE}"
        shasums_download_url="${download_base_url}/SHA256SUMS"
        curl -fsSLOJ --retry 3 "$bin_download_url"
        curl -fsSLOJ --retry 3 "$shasums_download_url"
        sha256sum -c --ignore-missing 2>/dev/null SHA256SUMS
        tmp_bin_dir="$(mktemp -d $RUNNER_TEMP/XXXXXXXXXX)"
        terragrunt_bin="$tmp_bin_dir/terragrunt"
        mv terragrunt_linux_${CPU_ARCHITECTURE} "$terragrunt_bin"
        rm SHA256SUMS
        chmod +x "$terragrunt_bin"
        echo "$tmp_bin_dir" >> $GITHUB_PATH
      env:
        TERRAGRUNT_VERSION: ${{ steps.resolve-versions.outputs.tg-version }}
        CPU_ARCHITECTURE: ${{ steps.resolve-architecture.outputs.cpu-architecture }}
