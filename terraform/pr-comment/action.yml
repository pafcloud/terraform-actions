name: pr-comment
description: Adds terraform plan, apply or destroy output to a pull request comment

inputs:
  github-token:
    description: GitHub auth token
    required: true
  terraform-output:
    description: Terraform output (stdout)
    required: true
  terraform-exit-code:
    description: Terraform exit code
    required: true
  terraform-run-type:
    description: Terraform run type, i.e. plan-for-apply, plan-for-destroy, apply-on-comment, apply-on-merge or destroy-on-merge
    required: true
  pull-request-number:
    description: Pull request number
    required: true
  working-directory:
    description: Working directory
    required: true

runs:
  using: composite
  steps:
    - run: |
        details() {
          local fmt="$1"
          local open=""
          if [ "$2" == "open" ]; then
            open=" open";
          fi

          echo "<details${open}><summary>"Show output"</summary>"
          echo
          echo "\`\`\`${fmt}"
          echo "$(python3 -c 'import sys; print(sys.stdin.read().strip())' <<< $3)"
          echo "\`\`\`"
          echo "</details>"
        }

        plan_msg() {

          echo "## "$1""
          echo "### Terraform Plan :clipboard:"
          summary_title="Show output"
          details terraform closed "$2" "$summary_title"
          echo
          if [ "$3" = "plan-for-apply" ]; then
            echo "Please review the plan above, ask code owners to approve this pull request, and then run terraform apply by commenting <code>/apply</code> or by merging this PR."
          else
            echo "Please review the plan above, ask code owners to approve this pull request, and then run terraform destroy by merging this PR"
          fi
        }

        failed_plan_msg() {
          echo "### Terraform \`plan\` failed ($1)"
          details text open "$2"
          echo
          echo "Please fix <code>terragrunt.hcl</code> inputs/module. Terraform plan is then automatically run again"
        }

        apply_msg() {
          echo "### Terraform \`apply\` ($1)"
          details text closed "$2"
          if [ "$3" = "apply-on-comment" ]; then
            echo
            echo "Please merge this pull request to keep Git base branch and terraform-managed resource state in sync"
          fi
        }

        failed_apply_msg() {
          echo "### Terraform \`apply\` failed ($1)"
          details text open "$2"
          echo
          echo "Please fix <code>terragrunt.hcl</code> inputs/module, and then run terraform apply again"
        }

        destroy_msg() {
          echo "### Terraform \`destroy\` ($1)"
          details text closed "$2"
        }

        failed_destroy_msg() {
          echo "### Terraform \`destroy\` failed ($1)"
          details text open "$2"
          echo
          echo "Please run terraform destroy manually (do \`git checkout $3\` to restore \`terragrunt.hcl\`)"
        }

        case "${RUN_TYPE}" in
          plan-for-apply|plan-for-destroy)
            if [ ${EXIT_CODE} -eq 0 ]; then
              MSG=$(plan_msg "${WORKING_DIRECTORY}" "${OUTPUT}" "${RUN_TYPE}")
            else
              MSG=$(failed_plan_msg "${WORKING_DIRECTORY}" "${OUTPUT}")
            fi
            ;;

          apply-on-comment|apply-on-merge)
            if [ $EXIT_CODE -eq 0 ]; then
              MSG=$(apply_msg "${WORKING_DIRECTORY}" "${OUTPUT}" "${RUN_TYPE}")
            else
              MSG=$(failed_apply_msg "${WORKING_DIRECTORY}" "${OUTPUT}")
            fi
            ;;

          destroy-on-merge)
            if [ $EXIT_CODE -eq 0 ]; then
              MSG=$(destroy_msg "${WORKING_DIRECTORY}" "${OUTPUT}")
            else
              auth="Authorization: Bearer ${{ inputs.github-token }}"
              pr_url="https://api.github.com/repos/${{ github.repository }}/pulls/${{ inputs.pull-request-number }}"
              pr_base_sha=$(curl -sH "$auth" "$pr_url" | jq -r .base.sha)
              MSG=$(failed_destroy_msg "${WORKING_DIRECTORY}" "${OUTPUT}" "${pr_base_sha}")
            fi
            ;;

          *)
            echo "ERROR: Unexpected terraform run type: ${RUN_TYPE}"
            exit 5
        esac

        echo "pr_comment<<EOF" >> $GITHUB_ENV
        echo "${MSG}" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV

      shell: bash
      env:
        RUN_TYPE: ${{ inputs.terraform-run-type }}
        WORKING_DIRECTORY: ${{ inputs.working-directory }}
        OUTPUT: ${{ inputs.terraform-output }}
        EXIT_CODE: ${{ inputs.terraform-exit-code }}
        PULL_REQUEST_NUMBER: ${{ inputs.pull-request-number }}
        GITHUB_TOKEN: ${{ inputs.github-token }}

    - name: Hide outdated pull request comment 
      uses: marocchino/sticky-pull-request-comment@331f8f5b4215f0445d3c07b4967662a32a2d3e31 # v2.9.0
      with:
        header: ${{ inputs.working-directory }}-${GITHUB_WORKFLOW}
        number: ${{ inputs.pull-request-number }}
        ignore_empty: true
        hide: true
        hide_classify: "OUTDATED"
      
    - name: Add pull request comment  
      uses: marocchino/sticky-pull-request-comment@331f8f5b4215f0445d3c07b4967662a32a2d3e31 # v2.9.0
      with:
        header: ${{ inputs.working-directory }}-${GITHUB_WORKFLOW}
        number: ${{ inputs.pull-request-number }}
        message: |
           ${{ env.pr_comment }}
