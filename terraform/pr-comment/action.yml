name: Add terraform plan or apply output to a pull request comment
description: Add terraform plan or apply output to a pull request comment

inputs:
  github-token:
    description: GitHub auth token
    required: true
  terraform-stdout:
    description: Terraform standard out
    required: true
  terraform-stderr:
    description: Terraform standard err
    required: true
  terraform-exit-code:
    description: Terraform exit code
    required: true
  terraform-run-type:
    description: Whatever this is run is plan or apply
    default: plan
  pull-request-number:
    description: Pull request number
    required: true
  working-directory:
    description: Working directory
    required: true


runs:
  using: composite
  steps:
    - run: |
        clean() {
          local subst='s/.*?'
          subst+='(An execution plan has been generated and is shown below.*?|No changes. Infrastructure is up-to-date.*?)'
          subst+='(Note: You didn.t specify an .-out. parameter to save this plan, so Terraform.*)?'
          subst+='Releasing state lock. This may take a few moments.../$1/smg'

          echo "$@" | perl -0777 -pe "${subst}" | grep -Ev '^-{72}'
        }

        details() {
          local fmt=""
          if [ "$1" != "-" ]; then
            fmt="$1"
          fi

          local open=""
          if [ "$2" == "open" ]; then
            open=" open";
          fi

          shift; shift

          echo "<details${open}><summary>Show output</summary>"
          echo
          echo "\`\`\`${fmt}"
          echo "$@"
          echo "\`\`\`"
          echo "</details>"
        }

        plan_msg() {
          local p=$1
          shift

          echo "### Terraform \`plan\` ($p)"
          output=$(clean "$@")
          details terraform closed "${output}"
          echo
          echo "Please review the plan above, ask a code owner to approve this pull request, and then comment <code>/apply</code> to run terraform apply"
        }

        failed_plan_msg() {
          local p=$1
          shift

          echo "### Terraform \`plan\` failed ($p)"
          details - open "$@"
          echo
          echo "Please fix <code>terragrunt.hcl</code> inputs/module (terraform plan will be automatically re-run)"
        }

        apply_msg() {
          local p=$1
          shift

          echo "### Terraform \`apply\` ($p)"
          details - closed "$@"
          echo
          echo "Please merge this pull request to keep Git base branch and terraform-managed resource state in sync"
        }

        failed_apply_msg() {
          local p=$1
          shift

          echo "### Terraform \`apply\` failed ($p)"
          details - open "$@"
          echo
          echo "Please fix <code>terragrunt.hcl</code> inputs/module, and then comment <code>/apply</code> to run terraform apply again"
        }

        case "${RUN_TYPE}" in
          plan)
            if [ ${EXIT_CODE} -eq 0 ]; then
              MSG=$(plan_msg "${WORKING_DIRECTORY}" "${INPUT}")
            else
              MSG=$(failed_plan_msg "${WORKING_DIRECTORY}" "${INPUT}")
            fi
            ;;

          apply)
            if [ $EXIT_CODE -eq 0 ]; then
              MSG=$(apply_msg "${WORKING_DIRECTORY}" "${INPUT}")
            else
              MSG=$(failed_apply_msg "${WORKING_DIRECTORY}" "${INPUT}")
            fi
            ;;
        esac

        gh pr comment ${PULL_REQUEST_NUMBER} --body "${MSG}"

      shell: bash
      env:
        RUN_TYPE: ${{ inputs.terraform-run-type }}
        WORKING_DIRECTORY: ${{ inputs.working-directory }}
        INPUT: ${{ format('{0}{1}', inputs.terraform-stdout, inputs.terraform-stderr) }}
        EXIT_CODE: ${{ inputs.terraform-exit-code }}
        PULL_REQUEST_NUMBER: ${{ inputs.pull-request-number }}
        GITHUB_TOKEN: ${{ inputs.github-token }}
