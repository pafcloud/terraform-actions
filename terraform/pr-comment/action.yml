name: Add terraform plan or apply output to a pull request comment
description: Add terraform plan or apply output to a pull request comment

inputs:
  github-token:
    description: GitHub auth token
    required: true
  terraform-stdout:
    description: Terraform standard out
    required: true
  terraform-stderr:
    description: Terraform standard err
    required: true
  terraform-exit-code:
    description: Terraform exit code
    required: true
  terraform-run-type:
    description: Whatever this is run is plan or apply
    default: plan
  pull-request-number:
    description: Pull request number
    required: true
  working-directory:
    description: Working directory
    required: true


runs:
  using: composite
  steps:
    - run: |
        # Some parts borrowed here: https://github.com/robburger/terraform-pr-commenter/blob/6e991422c10b4744765245fc370d61f40136c9ec/entrypoint.sh
        EXIT_CODE=${{ inputs.terraform-exit-code }}
        ACCEPT_HEADER="Accept: application/vnd.github.v3+json"
        AUTH_HEADER="Authorization: token ${{ inputs.github-token }}"
        CONTENT_HEADER="Content-Type: application/json"
        PR_COMMENTS_URL="https://api.github.com/repos/${{ github.repository }}/issues/${{ inputs.pull-request-number }}/comments"

        case "${{ inputs.terraform-run-type }}" in

          plan)
            if [ ${EXIT_CODE} -eq 0 ]; then
              # Plan succeeded
              CLEAN_PLAN=$(echo "$INPUT" | sed -nr '/-{72}/,/-{72}/{ /-{72}/d; p }') # Strip refresh section
              CLEAN_PLAN=${CLEAN_PLAN::65300} # GitHub has a 65535-char comment limit - truncate plan, leaving space for comment wrapper
              PR_COMMENT="### Terraform \`plan\` (${{ inputs.working-directory }})
        <details><summary>Show output</summary>

        \`\`\`terraform
        $CLEAN_PLAN
        \`\`\`
        </details>
        
        Please review the plan above, ask a code owner to approve this pull request, and then comment <code>/apply</code> to run terraform apply"
            else
              PR_COMMENT="### Terraform \`plan\` failed (${{ inputs.working-directory }})
        <details open><summary>Show output</summary>

        \`\`\`
        $INPUT
        \`\`\`
        </details>
        
        Please fix <code>terragrunt.hcl</code> inputs/module (terraform plan will be automatically re-run)"
            fi
            ;;

          apply)
            if [ $EXIT_CODE -eq 0 ]; then
              PR_COMMENT="### Terraform \`apply\` (${{ inputs.working-directory }})
        <details><summary>Show output</summary>

        \`\`\`
        $INPUT
        \`\`\`
        </details>
        
        Please merge this pull request to keep Git base branch and terraform-managed resource state in sync"
            else
              PR_COMMENT="### Terraform \`apply\` failed (${{ inputs.working-directory }})
        <details open><summary>Show output</summary>

        \`\`\`
        $INPUT
        \`\`\`
        </details>
        
        Please fix <code>terragrunt.hcl</code> inputs/module, and then comment <code>/apply</code> to run terraform apply again"
            fi
            ;;
        esac

        # Add comment to PR.
        PR_PAYLOAD=$(echo '{}' | jq --arg body "$PR_COMMENT" '.body = $body')
        curl -sS -X POST -H "${AUTH_HEADER}" -H "${ACCEPT_HEADER}" -H "${CONTENT_HEADER}" -d "${PR_PAYLOAD}" -L "${PR_COMMENTS_URL}" > /dev/null
      shell: bash
      env:
        INPUT: ${{ format('{0}{1}', inputs.terraform-stdout, inputs.terraform-stderr) }}
